// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoList.Repositories.Contexts;

#nullable disable

namespace TodoList.Repositories.Migrations
{
    [DbContext(typeof(TodoListContext))]
    partial class TodoListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("TodoList.Domain.Entities.Lists.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateCreate");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("DescriptionList")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DescriptionList");

                    b.HasKey("Id");

                    b.ToTable("List", (string)null);
                });

            modelBuilder.Entity("TodoList.Domain.Entities.TasksList.TaskList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateCreate");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("DescriptionTask")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DescriptionTask");

                    b.Property<bool>("Done")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Done");

                    b.Property<Guid>("IdList")
                        .HasColumnType("TEXT")
                        .HasColumnName("IdList");

                    b.Property<Guid?>("ListId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TasksList", (string)null);
                });

            modelBuilder.Entity("TodoList.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateCreate");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TodoList.Domain.Entities.TasksList.TaskList", b =>
                {
                    b.HasOne("TodoList.Domain.Entities.Lists.List", null)
                        .WithMany("TasksList")
                        .HasForeignKey("ListId");
                });

            modelBuilder.Entity("TodoList.Domain.Entities.Lists.List", b =>
                {
                    b.Navigation("TasksList");
                });
#pragma warning restore 612, 618
        }
    }
}
